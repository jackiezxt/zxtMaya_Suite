import argparse
import json
from pathlib import Path

HEADER = "# Auto-generated by tools/generate_mod.py\n"


def build_lines(manifest: dict, suite_root: Path) -> list[str]:
    suite_name = manifest.get("suite_name", "MyMayaSuite")
    version = manifest.get("version", "1.0")

    lines: list[str] = [
        f"+ {suite_name} {version} .",
        HEADER.strip(),
        "",
    ]

    for entry in manifest.get("entries", []):
        label = entry.get("name", "module")
        lines.append(f"# {label}")
        for section, key in (("PYTHONPATH", "python_paths"), ("MAYA_SCRIPT_PATH", "script_paths"), ("XBMLANGPATH", "icon_paths")):
            for relative in entry.get(key, []):
                rel_path = Path(relative).as_posix()
                lines.append(f"{section} +:= {rel_path}")
        lines.append("")
    return lines


def generate_mod(manifest_path: Path, target_path: Path) -> None:
    manifest = json.loads(manifest_path.read_text(encoding="utf-8"))
    suite_root = manifest_path.parent.resolve()
    lines = build_lines(manifest, suite_root)
    target_path.parent.mkdir(parents=True, exist_ok=True)
    target_path.write_text("\n".join(lines), encoding="utf-8")


def validate_paths(manifest_path: Path) -> None:
    manifest = json.loads(manifest_path.read_text(encoding="utf-8"))
    suite_root = manifest_path.parent.resolve()
    missing = []
    for entry in manifest.get("entries", []):
        for key in ("python_paths", "script_paths", "icon_paths"):
            for rel in entry.get(key, []):
                path = (suite_root / rel).resolve()
                if not path.exists():
                    missing.append(f"Missing path for {entry.get('name')}: {rel}")
    if missing:
        raise SystemExit("\n".join(missing))


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Generate Maya .mod file from suite manifest.")
    parser.add_argument("--maya", default="2024", help="Maya 版本号，例如 2024")
    parser.add_argument("--manifest", default="suite_manifest.json", help="manifest 文件路径")
    parser.add_argument("--output", help="输出的 .mod 文件路径")
    parser.add_argument("--validate", action="store_true", help="仅校验 manifest 路径，不生成 .mod")
    args = parser.parse_args()

    manifest_path = Path(args.manifest).resolve()
    if not manifest_path.exists():
        raise SystemExit(f"Manifest not found: {manifest_path}")

    if args.validate:
        validate_paths(manifest_path)
    else:
        if args.output:
            target_path = Path(args.output)
        else:
            target_path = Path("modules") / f"maya{args.maya}" / "MyMayaSuite.mod"
        generate_mod(manifest_path, target_path)
        print(f"Generated {target_path}")
